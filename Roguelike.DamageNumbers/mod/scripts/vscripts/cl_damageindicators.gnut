untyped
global function Cl_DamageIndicator_Init
global function PlayerDidDamageText
// ()
const vector INCOMING_DAMAGE_TEXT_BEGIN_POS = <0.63, 0.5 - 0.3, 0>
float OUTGOING_DAMAGE_TEXT_STACKING_FADE_TIME = 0.5
float OUTGOING_DAMAGE_TEXT_STACKING_DURATION = 1.3
float OUTGOING_DAMAGE_TEXT_STACKING_STAY_TIME = 1.0
float OUTGOING_DAMAGE_TEXT_SMALL_FADE_TIME = 1.0

float INCOMING_DAMAGE_TEXT_STACKING_FADE_TIME = 0.5
float INCOMING_DAMAGE_TEXT_STACKING_DURATION = 1.3
float INCOMING_DAMAGE_TEXT_STACKING_STAY_TIME = 0.8

var lastOutgoingDamageTextRui = null
var stackingIncomingDamageTextRui = null
float lastIncomingDamageTextHitTime = -99.0
float accumulatedIncomingDamage = 0.0

vector msgPos = <0,0,0>
var aspectRatioFixTopo

float[2]& screenSize = [1920, 1080]

struct OutgoingDamageData
{
	float damage
	int accumelatedHits
	float lastHitTime
	bool isLastHitCrit
	vector msgPos
}
table<entity, OutgoingDamageData> damageIndicators

void function Cl_DamageIndicator_Init()
{
	screenSize = GetScreenSize()
	#if MP
		//ClPilotSpeedometer_Init()
	#endif
    float right = (screenSize[1] / 9.0) * 16.0 / 5
	float down = screenSize[1] / 5
	float xOffset = (screenSize[0] - right) / 2
	aspectRatioFixTopo = RuiTopology_CreatePlane( <0, 0, 0>, <right, 0, 0>, <0, down, 0>, false )

	thread void function() : ()
	{
		var rui = RuiCreate( $"ui/cockpit_console_text_center.rpak", aspectRatioFixTopo, RUI_DRAW_HUD, 0)
		RuiSetInt( rui, "maxLines", 1 );
		RuiSetInt( rui, "lineNum", 0 );
		RuiSetFloat2( rui, "msgPos", <0.55 * 5 - 0.5, 0.55 * 5 - 0.5, 0> )
		RuiSetString( rui, "msgText",  "0" )
		RuiSetFloat3( rui, "msgColor", <0.0, 0.5, 1.0> )
		RuiSetFloat( rui, "msgFontSize", 150.0)
		RuiSetFloat( rui, "msgAlpha", 1.0 )
		RuiSetFloat( rui, "thicken", 0.1 )
		float fade = 0.0
		int lastChargeLevel = 0
		while (1)
		{
			float t = Time()
			wait 0
			float dt = Time() - t

			entity player = GetLocalViewPlayer()

			if (!IsValid(player))
				continue

			if (Roguelike_HasTitanLoadout(PRIMARY_RONIN) && player.IsTitan())
			{
				fade = 0.0
				RuiSetFloat2( rui, "msgPos", <0.55 * 5 - 0.5, 0.55 * 5 - 0.5, 0> )
				RuiSetFloat3( rui, "msgColor", <0.0, 0.5, 1.0> )
				RuiSetString( rui, "msgText", string( RoundToInt(RSE_Get( player, RoguelikeEffect.ronin_overload)) ))
				RuiSetFloat( rui, "msgAlpha", 1.0 )
			}
			else if (!player.IsTitan())
			{
				float fatigue = RSE_Get( player, RoguelikeEffect.pilot_fatigue)
				if (fatigue > 1.0)
				{
					fade = min(fade + dt * 4, 1.0)
				}
				else
				{
					fade = max(fade - dt * 4, 0.0)
				}
				RuiSetFloat2( rui, "msgPos", <(0.54 + 0.01 * pow(fade, 0.5)) * 5 - 0.5, 0.55 * 5 - 0.5, 0> )
				RuiSetString( rui, "msgText", format("`1Fatigued\n`0-%i%% DMG", RoundToInt(100 - 100.0 / max(sqrt(fatigue), 1.0))))
				RuiSetFloat3( rui, "msgColor", <0.5, 0.5, 0.5> )
				RuiSetFloat( rui, "msgAlpha", pow(fade, 2) )
			}
			else
			{
				RuiSetFloat( rui, "msgAlpha", 0.0 )
			}

			entity railgun = Roguelike_FindWeapon( player, PRIMARY_NORTHSTAR )
			if (IsValid(railgun) && player.GetActiveWeapon() != railgun)
			{
				int level = railgun.GetWeaponChargeLevel()
				if (level > lastChargeLevel)
				{
                    if (level >= railgun.GetWeaponChargeLevelMax())
                        railgun.EmitWeaponSound( "Weapon_Titan_Sniper_LevelTick_Final" )
                    else
                        railgun.EmitWeaponSound( "Weapon_Titan_Sniper_LevelTick_" + level )
				}
				lastChargeLevel = railgun.GetWeaponChargeLevel()
			}
		}
	}()

	delaythread(0.0) void function() : ()
	{
		array<var> ruis = []
		var rui = RuiCreate( $"ui/cockpit_console_text_top_left.rpak", clGlobal.topoCockpitHud, RUI_DRAW_COCKPIT, 0)
		RuiSetInt( rui, "maxLines", 1 );
		RuiSetInt( rui, "lineNum", 0 );
		RuiSetFloat2( rui, "msgPos", <0.05, 0.52, 0> )
		RuiSetString( rui, "msgText",  "0:10 `1effect\n`00:05 `1my god" )
		RuiSetFloat3( rui, "msgColor", <1.0, 1.0, 1.0> )
		RuiSetFloat( rui, "msgFontSize", 32.0)
		RuiSetFloat( rui, "msgAlpha", 0.9 )
		RuiSetFloat( rui, "thicken", 0.2 )
		while (1)
		{
			wait 0

			if (!IsValid(GetLocalViewPlayer()))
				continue
			
			string text = ""

			foreach (RSEInstance instance in GetLocalViewPlayer().e.rseData)
			{
				if (instance.endTime <= Time())
					continue
				float timeLeft = instance.endTime - Time()
				if (instance.effect in effectDisplayNames)
				{
					if (instance.effect in effectDisplayPercentage)
					{
						float intensity = RSE_GetIntensity( instance )
						text += format("`0%03i%% `1%s\n", int(intensity * 100.0), effectDisplayNames[instance.effect])
					}
					else if (instance.effect in effectDisplayStacks)
					{
						float intensity = RSE_GetIntensity( instance )
						text += format("`0%i:%02i `1%s x`0%i\n", int(timeLeft / 60), int(timeLeft % 60), effectDisplayNames[instance.effect], int(intensity))
					}
					else
					{
						text += format("`0%i:%02i `1%s\n", int(timeLeft / 60), int(timeLeft % 60), effectDisplayNames[instance.effect])
					}
				}
			}
			RuiSetString( rui, "msgText", text )
		}
	}()
}

void function CreateStackingDamageFlyout( entity s, float damage, bool isCrit, vector msgPos )
{
	var rui = RuiCreate( $"ui/cockpit_console_text_center.rpak", aspectRatioFixTopo, RUI_DRAW_HUD, 0)
	RuiSetInt( rui, "maxLines", 1 );
	RuiSetInt( rui, "lineNum", 0 );
	RuiSetFloat2( rui, "msgPos", WorldToScreenPos(msgPos) - <0.5, 0.55, 0> )
	RuiSetString( rui, "msgText",  RecursiveCommas(damage.tointeger()) )
	RuiSetFloat3( rui, "msgColor", isCrit ? <1.0, 0.75, 0.0> : <1.0, 1.0, 1.0> )
	RuiSetFloat( rui, "msgFontSize", 150.0)
	RuiSetFloat( rui, "msgAlpha", 1.0 )
	RuiSetFloat( rui, "thicken", 0.1 )

	OutgoingDamageData data
	data.damage = damage
	data.isLastHitCrit = isCrit
	data.accumelatedHits = 1
	data.msgPos = msgPos
	data.lastHitTime = Time()
	damageIndicators[s] <- data

	while (Time() - data.lastHitTime <= OUTGOING_DAMAGE_TEXT_STACKING_STAY_TIME + OUTGOING_DAMAGE_TEXT_STACKING_FADE_TIME)
	{
		string text = RecursiveCommas(data.damage.tointeger())
		if (data.isLastHitCrit)
			text += "!"
		RuiSetString( rui, "msgText", text)
		RuiSetFloat2( rui, "msgPos", WorldToScreenPos(data.msgPos) - <0.5, 0.52, 0> )
		RuiSetFloat( rui, "msgAlpha", GraphCapped( Time() - data.lastHitTime, OUTGOING_DAMAGE_TEXT_STACKING_STAY_TIME,
			OUTGOING_DAMAGE_TEXT_STACKING_STAY_TIME + OUTGOING_DAMAGE_TEXT_STACKING_FADE_TIME, 1.0, 0.0 ) )
		RuiSetFloat3( rui, "msgColor", data.isLastHitCrit ? <1.0, 0.75, 0.0> : <1.0, 1.0, 1.0> )
		WaitFrame()
	}
	RuiDestroyIfAlive(rui)
	delete damageIndicators[s]
}

void function AddSmallDamageTextFlyout(float damage, bool isCrit, vector msgPos)
{
	var rui = RuiCreate( $"ui/cockpit_console_text_center.rpak", aspectRatioFixTopo, RUI_DRAW_HUD, 0)
	RuiSetInt( rui, "maxLines", 1 );
	RuiSetInt( rui, "lineNum", 0 );
	vector posOffset = <0.5, 0.6, 0>
	RuiSetFloat2( rui, "msgPos", WorldToScreenPos(msgPos) - posOffset )
	RuiSetString( rui, "msgText",  RecursiveCommas(damage.tointeger()) )
	RuiSetFloat3( rui, "msgColor", isCrit ? <1.0, 0.75, 0.0> : <1.0, 1.0, 1.0> )
	RuiSetFloat( rui, "msgFontSize", GraphCapped(damage, 100.0, 1000.0, 75.0, 150.0) )
	RuiSetFloat( rui, "msgAlpha", 0.9 )
	RuiSetFloat( rui, "thicken", 0.0 )

	float startTime = Time()

	while ( Time() - startTime < OUTGOING_DAMAGE_TEXT_SMALL_FADE_TIME )
	{
		float alpha = Graph( Time() - startTime, 0, OUTGOING_DAMAGE_TEXT_SMALL_FADE_TIME, 1.0, 0 )
		posOffset.y += Graph( Time() - startTime, 0, OUTGOING_DAMAGE_TEXT_SMALL_FADE_TIME, 0, 0.0 )
		RuiSetFloat( rui, "msgAlpha", alpha )
		RuiSetFloat2( rui, "msgPos", WorldToScreenPos(msgPos) - posOffset )
		WaitFrame()
	}
	RuiDestroyIfAlive(rui)
}

vector function WorldToScreenPos( vector position )
{
    array pos = expect array( Hud.ToScreenSpace( position ) )

	float aspectRatio = screenSize[0] / screenSize[1]
	float targetAspectRatio = 1.77777778

    vector result = <float( pos[0] ) / screenSize[0] * 5, float( pos[1] ) / screenSize[1] * 5, 0 >
    //print(result)
    return result
}

string function RecursiveCommas(int n, bool recursed = false)
{
    int rest = n % 1000; //"last 3 digits"
    n /= 1000;

    if (n > 0) {
        return RecursiveCommas(n) + "," + format( "%03i", rest ); //printing "begining"
    }

    return rest.tostring(); //first chunk of the number
}
void function PlayerDidDamageText( float damage, vector damagePosition, entity victim, bool isCrit, bool isIneffective )
{
	if (!GetConVarBool("comp_hud_damage_indicator")) return
	
	int entDEF = GetConVarInt("power_enemy_def")

	float scalar = 1.0
	//if (victim.IsTitan() || IsSuperSpectre(victim))
	//	scalar = 500.0 / (500 + entDEF)

	damage /= scalar
	
	//damagePosition = victim.GetOrigin() + <0,0,victim.GetBoundingMaxs().z>
	if (victim.IsTitan())
		damagePosition += <RandomFloatRange(-24, 24), RandomFloatRange(-24, 24), RandomFloatRange(-24, 24) + 12>
	else
		damagePosition += <RandomFloatRange(-6, 6), RandomFloatRange(-6, 6), RandomFloatRange(-6, 6) + 12>
	msgPos = damagePosition
	//damage /= scalar
	//damage *= 1.0 + entDEF * 0.003333

	thread AddSmallDamageTextFlyout( damage, isCrit, msgPos )

	if (victim in damageIndicators)
	{
		OutgoingDamageData data = damageIndicators[victim]
		data.lastHitTime = Time()
		data.damage += damage
		data.isLastHitCrit = isCrit
		data.msgPos = msgPos
	}
	else
	{
	//	thread CreateStackingDamageFlyout( victim, damage, isCrit, msgPos )
	}
}